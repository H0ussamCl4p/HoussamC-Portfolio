name: Deploy with GitHub Stats

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  actions: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Find latest successful `generate-github-stats` artifact
        id: find_artifact
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const workflow_id = 'generate-github-stats.yml';
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id,
              per_page: 10,
              status: 'success',
            });
            if (!runs.data.workflow_runs || runs.data.workflow_runs.length === 0) {
              core.setFailed('No successful runs of generate-github-stats.yml found');
              return;
            }
            const run = runs.data.workflow_runs[0];
            const arts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: run.id,
            });
            const art = arts.data.artifacts.find(a => a.name === 'github-stats');
            if (!art) {
              core.setFailed('Artifact "github-stats" not found on latest successful run');
              return;
            }
            return { url: art.archive_download_url, run: run.id };

      - name: Download and extract stats artifact into public/
        env:
          API_URL: ${{ fromJson(steps.find_artifact.outputs.result).url }}
        run: |
          if [ -z "${API_URL}" ]; then echo "No artifact URL found, skipping"; exit 1; fi
          mkdir -p public
          curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -L "$API_URL" -o github-stats.zip
          unzip -o github-stats.zip -d public
          echo "Extracted files into public/"

      - name: Install dependencies and build
        run: |
          npm ci
          npm run build

      - name: Deploy to Vercel (optional)
        if: ${{ env.VERCEL_TOKEN != '' }}
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ env.VERCEL_TOKEN }}
          vercel-args: "--prod"
          working-directory: .
          vercel-project-id: ${{ env.VERCEL_PROJECT_ID }}
          vercel-org-id: ${{ env.VERCEL_ORG_ID }}
