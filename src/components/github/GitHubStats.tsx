"use client";

import { useEffect, useState, useRef } from "react";
import styles from "./GitHubStats.module.scss";

type Stats = {
  stars: number;
  forks: number;
  watchers: number;
  contributors?: number;
  ownerContributions?: number;
  totalContributions?: number;
  totalCommitContributions?: number;
  totalPullRequestContributions?: number;
  totalIssueContributions?: number;
  contributedRepositoriesCount?: number;
};

type Contributor = { login?: string; contributions?: number };

type TopContributor = { login?: string; total?: number };

type MetricsSummary = {
  totalCommitsLastYear?: number;
  topContributors?: TopContributor[];
  participationAll?: number;
  participationOwner?: number;
  weeklySeries?: number[];
};

function useAnimatedNumber(target: number, duration = 700) {
  const [value, setValue] = useState(0);
  const raf = useRef<number | null>(null);

  useEffect(() => {
    let start: number | null = null;
    const from = 0;
    const to = Math.max(0, Math.floor(target || 0));
    if (to === from) {
      setValue(to);
      return;
    }
    const step = (timestamp: number) => {
      if (!start) start = timestamp;
      const progress = Math.min(1, (timestamp - start) / duration);
      const next = Math.round(from + (to - from) * progress);
      setValue(next);
      if (progress < 1) {
        raf.current = requestAnimationFrame(step);
      }
    };
    raf.current = requestAnimationFrame(step);
    return () => {
      if (raf.current) cancelAnimationFrame(raf.current);
    };
  }, [target, duration]);

  return value;
}

export function GitHubStats({ owner, repo }: { owner: string; repo: string }) {
  const [stats, setStats] = useState<Stats | null>(null);
  // extend Stats with optional internal summary storage
  type StatsWithTop = Stats & { _topContributors?: TopContributor[] };
  // internal extension for weekly series cached on the stats object
  type StatsWithSeries = StatsWithTop & { __weeklySeries?: number[] };
  const [expanded, setExpanded] = useState(false);
  const [copied, setCopied] = useState(false);
  const cacheKey = `ghstats:${owner}/${repo}`;

  const starsAnim = useAnimatedNumber(stats?.stars ?? 0);
  const commitsAnim = useAnimatedNumber(
    stats?.totalCommitContributions ?? stats?.totalContributions ?? 0
  );

  useEffect(() => {
    const cached =
      typeof window !== "undefined"
        ? window.localStorage.getItem(cacheKey)
        : null;
    if (cached) {
      try {
        const parsed = JSON.parse(cached);
        setStats(parsed);
      } catch (e) {
        // ignore
      }
    }

    async function fetchStats() {
      // Prefer the static pre-generated file if present (generated by GitHub Actions)
      try {
        const staticRes = await fetch("/github-stats.json");
        if (staticRes.ok) {
          const staticJson = await staticRes.json();
          // map to Stats shape
          const s: Stats = {
            stars: staticJson.repo?.stars ?? 0,
            forks: staticJson.repo?.forks ?? 0,
            watchers: staticJson.repo?.watchers ?? 0,
            totalContributions: staticJson.totalContributions ?? 0,
            totalCommitContributions: staticJson.totalCommitContributions ?? 0,
            totalPullRequestContributions:
              staticJson.totalPullRequestContributions ?? 0,
            totalIssueContributions: staticJson.totalIssueContributions ?? 0,
            contributedRepositoriesCount:
              staticJson.contributedRepositoriesCount ?? 0,
          };
          // prefer compact summary if available (smaller payload from metrics endpoints)
          if (staticJson.repo?.summary) {
            try {
              const sum = staticJson.repo.summary;
              // prefer totalCommitsLastYear if provided
              if (typeof sum.totalCommitsLastYear === "number") {
                s.totalCommitContributions = sum.totalCommitsLastYear;
              }
              // attach top contributors count as contributors length hint
              if (Array.isArray(sum.topContributors)) {
                s.contributors = sum.topContributors.length;
              }
              if (Array.isArray(sum.weeklySeries)) {
                const arr: number[] = sum.weeklySeries.map((n: unknown) =>
                  Number((n as number) || 0)
                );
                (s as StatsWithSeries).__weeklySeries = arr;
              }
            } catch (e) {
              // ignore
            }
          }
          setStats(s);
          try {
            window.localStorage.setItem(cacheKey, JSON.stringify(s));
          } catch (e) {}
          return; // done
        }
      } catch (e) {
        // ignore static fetch errors and continue to live fetch
      }
      try {
        const res = await fetch(
          `https://api.github.com/repos/${owner}/${repo}`
        );
        if (!res.ok) throw new Error("GitHub API error");
        const json = await res.json();
        const s: Stats = {
          stars: json.stargazers_count ?? 0,
          forks: json.forks_count ?? 0,
          watchers: json.watchers_count ?? 0,
        };

        // Try to fetch contributors to show contribution counts.
        try {
          const contribRes = await fetch(
            `https://api.github.com/repos/${owner}/${repo}/contributors?per_page=100`
          );
          if (contribRes.ok) {
            const contribJson = await contribRes.json();
            if (Array.isArray(contribJson)) {
              s.contributors = contribJson.length;
              const ownerEntry = (contribJson as Contributor[]).find((c) => {
                if (!c || !c.login) return false;
                return c.login.toLowerCase() === owner.toLowerCase();
              });
              s.ownerContributions = ownerEntry?.contributions ?? 0;
            }
          }
        } catch (e) {
          // ignore contributor fetch errors (rate limits etc.)
        }

        setStats(s);
        try {
          window.localStorage.setItem(cacheKey, JSON.stringify(s));
        } catch (e) {
          // ignore
        }
        // Fetch server-side contribution breakdown (requires GITHUB_TOKEN env on server)
        try {
          const contribRes = await fetch(
            `/api/github-stats?user=${encodeURIComponent(
              owner
            )}&year=${new Date().getFullYear()}`
          );
          if (contribRes.ok) {
            const contribJson = await contribRes.json();
            if (!contribJson.error) {
              s.totalContributions = contribJson.totalContributions ?? 0;
              s.totalCommitContributions =
                contribJson.totalCommitContributions ?? 0;
              s.totalPullRequestContributions =
                contribJson.totalPullRequestContributions ?? 0;
              s.totalIssueContributions =
                contribJson.totalIssueContributions ?? 0;
              s.contributedRepositoriesCount =
                contribJson.contributedRepositoriesCount ?? 0;
              // if server provided repo summary, prefer it
              if (contribJson.repo?.summary) {
                const summary = contribJson.repo.summary as MetricsSummary;
                if (typeof summary.totalCommitsLastYear === "number") {
                  s.totalCommitContributions = summary.totalCommitsLastYear;
                }
                if (Array.isArray(summary.topContributors)) {
                  const top = summary.topContributors
                    .slice(0, 5)
                    .map((c) => ({ login: c.login, total: c.total }));
                  (s as StatsWithTop)._topContributors = top;
                  s.contributors = s.contributors ?? top.length;
                }
                if (Array.isArray((summary as MetricsSummary).weeklySeries)) {
                  const ws = (summary as MetricsSummary).weeklySeries;
                  if (ws) {
                    const arr: number[] = ws.map((n) => Number(n || 0));
                    (s as StatsWithSeries).__weeklySeries = arr;
                  }
                }
              }
            }
          }
        } catch (e) {
          // ignore server contribution fetch errors
        }
      } catch (err) {
        console.warn("Failed to fetch GitHub stats", err);
      }
    }

    fetchStats();
  }, [owner, repo, cacheKey]);

  // actions
  const onCopy = async () => {
    const text = `https://github.com/${owner}`;
    try {
      await navigator.clipboard.writeText(text);
      setCopied(true);
      setTimeout(() => setCopied(false), 1800);
    } catch (e) {
      // ignore
    }
  };

  const onDownload = () => {
    // attempt to download the generated JSON if available in public
    const url = "/github-stats.json";
    const a = document.createElement("a");
    a.href = url;
    a.download = `${owner}-github-stats.json`;
    document.body.appendChild(a);
    a.click();
    a.remove();
  };

  // always render the card; show placeholders while loading or when data is unavailable
  const loaded = Boolean(stats);

  return (
    <div className={styles.container}>
      <section className={styles.cardClean} aria-label="GitHub stats">
        <div className={styles.header}>
          <div style={{ display: "flex", alignItems: "center", gap: 10 }}>
            <div className={styles.title}>{owner}</div>
            {/* sparkline: small SVG using summary weekly series when available */}
            {(stats as StatsWithTop)?._topContributors ? null : null}
            {(() => {
              // try to read weekly series from cached localStorage or static JSON that populated stats
              const maybe = (stats as StatsWithSeries)?.__weeklySeries;
              // also support inline: if stats totalCommitContributions equals weekly sum, we may not have series
              return maybe && maybe.length > 0 ? (
                <svg
                  width="70"
                  height="20"
                  viewBox={`0 0 ${maybe.length} 20`}
                  preserveAspectRatio="none"
                  aria-hidden
                >
                  <title>Weekly commits</title>
                  <polyline
                    fill="none"
                    stroke="#9fbff7"
                    strokeWidth={1.2}
                    points={maybe
                      .map(
                        (v, i) =>
                          `${i},${
                            20 -
                            Math.round((v / (Math.max(...maybe) || 1)) * 16)
                          }`
                      )
                      .join(" ")}
                  />
                </svg>
              ) : null;
            })()}
          </div>
          <div className={styles.sub}>GitHub overview</div>
        </div>

        <div className={styles.metrics}>
          <div className={styles.metric}>
            <div className={styles.metricLabel}>Stars</div>
            <div className={styles.metricValue}>{stats ? starsAnim : "—"}</div>
          </div>
          <div className={styles.metric}>
            <div className={styles.metricLabel}>Commits (year)</div>
            <div className={styles.metricValue}>
              {stats ? commitsAnim : "—"}
            </div>
          </div>
          <div className={styles.metric}>
            <div className={styles.metricLabel}>PRs</div>
            <div className={styles.metricValue}>
              {stats?.totalPullRequestContributions ?? "—"}
            </div>
          </div>
          <div className={styles.metric}>
            <div className={styles.metricLabel}>Issues</div>
            <div className={styles.metricValue}>
              {stats?.totalIssueContributions ?? "—"}
            </div>
          </div>
        </div>

        <div className={styles.actionsClean}>
          <button type="button" className={styles.actionClean} onClick={onCopy}>
            {copied ? "Copied" : "Copy profile"}
          </button>
          <button
            type="button"
            className={styles.actionClean}
            onClick={onDownload}
          >
            Download JSON
          </button>
          <button
            type="button"
            className={styles.actionClean}
            onClick={() => setExpanded((s) => !s)}
            aria-expanded={expanded}
          >
            {expanded ? "Hide" : "Details"}
          </button>
        </div>

        {expanded && (
          <div className={styles.detailsClean}>
            <div>
              <strong>Total contributions:</strong>{" "}
              {stats?.totalContributions ?? "—"}
            </div>
            <div>
              <strong>Contributed repos:</strong>{" "}
              {stats?.contributedRepositoriesCount ?? "—"}
            </div>
            <div>
              <strong>Repo stars:</strong> {stats?.stars ?? "—"}
            </div>
            {/* show top contributors if available */}
            {((stats as StatsWithTop)?._topContributors ?? []).length > 0 && (
              <div style={{ marginTop: 8 }}>
                <strong>Top contributors:</strong>
                <ol style={{ margin: "6px 0 0 18px" }}>
                  {((stats as StatsWithTop)._topContributors || [])
                    .slice(0, 5)
                    .map((c, idx) => (
                      <li key={c.login || idx}>
                        {c.login} — {c.total}
                      </li>
                    ))}
                </ol>
              </div>
            )}
          </div>
        )}
      </section>
    </div>
  );
}
