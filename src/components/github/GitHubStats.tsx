"use client";

import { useEffect, useState, useRef } from "react";
import styles from "./GitHubStats.module.scss";

type Stats = {
  stars: number;
  forks: number;
  watchers: number;
  contributors?: number;
  ownerContributions?: number;
  totalContributions?: number;
  totalCommitContributions?: number;
  totalPullRequestContributions?: number;
  totalIssueContributions?: number;
  contributedRepositoriesCount?: number;
};

type Contributor = { login?: string; contributions?: number };

function useAnimatedNumber(target: number, duration = 700) {
  const [value, setValue] = useState(0);
  const raf = useRef<number | null>(null);

  useEffect(() => {
    let start: number | null = null;
    const from = 0;
    const to = Math.max(0, Math.floor(target || 0));
    if (to === from) {
      setValue(to);
      return;
    }
    const step = (timestamp: number) => {
      if (!start) start = timestamp;
      const progress = Math.min(1, (timestamp - start) / duration);
      const next = Math.round(from + (to - from) * progress);
      setValue(next);
      if (progress < 1) {
        raf.current = requestAnimationFrame(step);
      }
    };
    raf.current = requestAnimationFrame(step);
    return () => {
      if (raf.current) cancelAnimationFrame(raf.current);
    };
  }, [target, duration]);

  return value;
}

export function GitHubStats({ owner, repo }: { owner: string; repo: string }) {
  const [stats, setStats] = useState<Stats | null>(null);
  const [expanded, setExpanded] = useState(false);
  const [copied, setCopied] = useState(false);
  const cacheKey = `ghstats:${owner}/${repo}`;

  const starsAnim = useAnimatedNumber(stats?.stars ?? 0);
  const commitsAnim = useAnimatedNumber(
    stats?.totalCommitContributions ?? stats?.totalContributions ?? 0
  );

  useEffect(() => {
    const cached =
      typeof window !== "undefined"
        ? window.localStorage.getItem(cacheKey)
        : null;
    if (cached) {
      try {
        const parsed = JSON.parse(cached);
        setStats(parsed);
      } catch (e) {
        // ignore
      }
    }

    async function fetchStats() {
      // Prefer the static pre-generated file if present (generated by GitHub Actions)
      try {
        const staticRes = await fetch("/github-stats.json");
        if (staticRes.ok) {
          const staticJson = await staticRes.json();
          // map to Stats shape
          const s: Stats = {
            stars: staticJson.repo?.stars ?? 0,
            forks: staticJson.repo?.forks ?? 0,
            watchers: staticJson.repo?.watchers ?? 0,
            totalContributions: staticJson.totalContributions ?? 0,
            totalCommitContributions: staticJson.totalCommitContributions ?? 0,
            totalPullRequestContributions:
              staticJson.totalPullRequestContributions ?? 0,
            totalIssueContributions: staticJson.totalIssueContributions ?? 0,
            contributedRepositoriesCount:
              staticJson.contributedRepositoriesCount ?? 0,
          };
          setStats(s);
          try {
            window.localStorage.setItem(cacheKey, JSON.stringify(s));
          } catch (e) {}
          return; // done
        }
      } catch (e) {
        // ignore static fetch errors and continue to live fetch
      }
      try {
        const res = await fetch(
          `https://api.github.com/repos/${owner}/${repo}`
        );
        if (!res.ok) throw new Error("GitHub API error");
        const json = await res.json();
        const s: Stats = {
          stars: json.stargazers_count ?? 0,
          forks: json.forks_count ?? 0,
          watchers: json.watchers_count ?? 0,
        };

        // Try to fetch contributors to show contribution counts.
        try {
          const contribRes = await fetch(
            `https://api.github.com/repos/${owner}/${repo}/contributors?per_page=100`
          );
          if (contribRes.ok) {
            const contribJson = await contribRes.json();
            if (Array.isArray(contribJson)) {
              s.contributors = contribJson.length;
              const ownerEntry = (contribJson as Contributor[]).find((c) => {
                if (!c || !c.login) return false;
                return c.login.toLowerCase() === owner.toLowerCase();
              });
              s.ownerContributions = ownerEntry?.contributions ?? 0;
            }
          }
        } catch (e) {
          // ignore contributor fetch errors (rate limits etc.)
        }

        setStats(s);
        try {
          window.localStorage.setItem(cacheKey, JSON.stringify(s));
        } catch (e) {
          // ignore
        }
        // Fetch server-side contribution breakdown (requires GITHUB_TOKEN env on server)
        try {
          const contribRes = await fetch(
            `/api/github-stats?user=${encodeURIComponent(
              owner
            )}&year=${new Date().getFullYear()}`
          );
          if (contribRes.ok) {
            const contribJson = await contribRes.json();
            if (!contribJson.error) {
              s.totalContributions = contribJson.totalContributions ?? 0;
              s.totalCommitContributions =
                contribJson.totalCommitContributions ?? 0;
              s.totalPullRequestContributions =
                contribJson.totalPullRequestContributions ?? 0;
              s.totalIssueContributions =
                contribJson.totalIssueContributions ?? 0;
              s.contributedRepositoriesCount =
                contribJson.contributedRepositoriesCount ?? 0;
            }
          }
        } catch (e) {
          // ignore server contribution fetch errors
        }
      } catch (err) {
        console.warn("Failed to fetch GitHub stats", err);
      }
    }

    fetchStats();
  }, [owner, repo, cacheKey]);

  // actions
  const onCopy = async () => {
    const text = `https://github.com/${owner}`;
    try {
      await navigator.clipboard.writeText(text);
      setCopied(true);
      setTimeout(() => setCopied(false), 1800);
    } catch (e) {
      // ignore
    }
  };

  const onDownload = () => {
    // attempt to download the generated JSON if available in public
    const url = "/github-stats.json";
    const a = document.createElement("a");
    a.href = url;
    a.download = `${owner}-github-stats.json`;
    document.body.appendChild(a);
    a.click();
    a.remove();
  };

  // always render the card; show placeholders while loading or when data is unavailable
  const loaded = Boolean(stats);

  return (
    <div className={styles.container}>
      <section className={styles.cardPrimary} aria-label="GitHub stats card">
        <div className={styles.leftCol}>
          {/* Primary: github-readme-stats badges â€” no token required */}
          <a
            className={styles.badgeLink}
            href={`https://github.com/${owner}`}
            target="_blank"
            rel="noreferrer"
            aria-label={`${owner} on GitHub`}
          >
            <img
              className={styles.mainBadge}
              src={`https://github-readme-stats.vercel.app/api?username=${owner}&show_icons=true&theme=dark&hide_border=true`}
              alt={`${owner}'s GitHub stats`}
              style={{ width: "100%", maxWidth: 420 }}
            />
          </a>

          <div className={styles.badgesRow}>
            <button
              type="button"
              className={styles.badgeBtn}
              onClick={() =>
                window.open(
                  `https://github.com/${owner}?tab=repositories`,
                  "_blank"
                )
              }
              aria-label="Open repositories"
            >
              <img
                className={styles.smallBadge}
                src={`https://github-readme-stats.vercel.app/api/top-langs?username=${owner}&langs_count=6&layout=compact&theme=dark&hide_border=true`}
                alt="Top languages"
              />
            </button>
            <button
              type="button"
              className={styles.badgeBtn}
              onClick={() =>
                window.open(
                  `https://github.com/${owner}/graphs/streak`,
                  "_blank"
                )
              }
              aria-label="Open streaks"
            >
              <img
                className={styles.smallBadge}
                src={`https://github-readme-streak-stats.herokuapp.com/?user=${owner}&theme=dark&hide_border=true`}
                alt="Streak stats"
              />
            </button>
          </div>

          <div className={styles.actionsRow}>
            <button
              type="button"
              className={styles.actionBtn}
              onClick={onCopy}
              aria-label="Copy GitHub profile link"
            >
              {copied ? "Copied" : "Copy"}
            </button>
            <button
              type="button"
              className={styles.actionBtn}
              onClick={onDownload}
              aria-label="Download stats JSON"
            >
              Download
            </button>
            <button
              type="button"
              className={styles.actionBtn}
              onClick={() => setExpanded((s) => !s)}
              aria-expanded={expanded}
            >
              {expanded ? "Hide" : "Details"}
            </button>
          </div>
        </div>

        {/* Fallback: structured numeric display when available */}
        <div className={styles.rightCol}>
          {loaded ? (
            <div className={styles.fallback}>
              <div className={styles.title}>{owner}'s GitHub Stats</div>
              <div className={styles.list}>
                <div className={styles.item}>
                  <div className={styles.label}>Stars:</div>
                  <div className={styles.value}>{starsAnim}</div>
                </div>
                <div className={styles.item}>
                  <div className={styles.label}>Commits (year):</div>
                  <div className={styles.value}>{commitsAnim}</div>
                </div>
              </div>

              <div
                className={`${styles.details} ${expanded ? styles.open : ""}`}
              >
                <div className={styles.detailRow}>
                  <div className={styles.detailLabel}>Total contributions</div>
                  <div className={styles.detailValue}>
                    {stats?.totalContributions ?? "â€”"}
                  </div>
                </div>
                <div className={styles.detailRow}>
                  <div className={styles.detailLabel}>PRs</div>
                  <div className={styles.detailValue}>
                    {stats?.totalPullRequestContributions ?? "â€”"}
                  </div>
                </div>
                <div className={styles.detailRow}>
                  <div className={styles.detailLabel}>Issues</div>
                  <div className={styles.detailValue}>
                    {stats?.totalIssueContributions ?? "â€”"}
                  </div>
                </div>
                <div className={styles.detailRow}>
                  <div className={styles.detailLabel}>Contributed repos</div>
                  <div className={styles.detailValue}>
                    {stats?.contributedRepositoriesCount ?? "â€”"}
                  </div>
                </div>
              </div>
            </div>
          ) : (
            <div className={styles.placeholder}>
              GitHub stats unavailable â€” showing badges above
            </div>
          )}
        </div>
      </section>
    </div>
  );
}
