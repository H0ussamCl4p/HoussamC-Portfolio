"use client";

import { useEffect, useState } from "react";
import styles from "./GitHubStats.module.scss";

type Stats = {
  stars: number;
  forks: number;
  watchers: number;
  contributors?: number;
  ownerContributions?: number;
  totalContributions?: number;
  totalCommitContributions?: number;
  totalPullRequestContributions?: number;
  totalIssueContributions?: number;
  contributedRepositoriesCount?: number;
};

type Contributor = { login?: string; contributions?: number };

export function GitHubStats({ owner, repo }: { owner: string; repo: string }) {
  const [stats, setStats] = useState<Stats | null>(null);
  const cacheKey = `ghstats:${owner}/${repo}`;

  useEffect(() => {
    const cached =
      typeof window !== "undefined"
        ? window.localStorage.getItem(cacheKey)
        : null;
    if (cached) {
      try {
        const parsed = JSON.parse(cached);
        setStats(parsed);
      } catch (e) {
        // ignore
      }
    }

    async function fetchStats() {
      // Prefer the static pre-generated file if present (generated by GitHub Actions)
      try {
        const staticRes = await fetch("/github-stats.json");
        if (staticRes.ok) {
          const staticJson = await staticRes.json();
          // map to Stats shape
          const s: Stats = {
            stars: staticJson.repo?.stars ?? 0,
            forks: staticJson.repo?.forks ?? 0,
            watchers: staticJson.repo?.watchers ?? 0,
            totalContributions: staticJson.totalContributions ?? 0,
            totalCommitContributions: staticJson.totalCommitContributions ?? 0,
            totalPullRequestContributions:
              staticJson.totalPullRequestContributions ?? 0,
            totalIssueContributions: staticJson.totalIssueContributions ?? 0,
            contributedRepositoriesCount:
              staticJson.contributedRepositoriesCount ?? 0,
          };
          setStats(s);
          try {
            window.localStorage.setItem(cacheKey, JSON.stringify(s));
          } catch (e) {}
          return; // done
        }
      } catch (e) {
        // ignore static fetch errors and continue to live fetch
      }
      try {
        const res = await fetch(
          `https://api.github.com/repos/${owner}/${repo}`
        );
        if (!res.ok) throw new Error("GitHub API error");
        const json = await res.json();
        const s: Stats = {
          stars: json.stargazers_count ?? 0,
          forks: json.forks_count ?? 0,
          watchers: json.watchers_count ?? 0,
        };

        // Try to fetch contributors to show contribution counts.
        try {
          const contribRes = await fetch(
            `https://api.github.com/repos/${owner}/${repo}/contributors?per_page=100`
          );
          if (contribRes.ok) {
            const contribJson = await contribRes.json();
            if (Array.isArray(contribJson)) {
              s.contributors = contribJson.length;
              const ownerEntry = (contribJson as Contributor[]).find((c) => {
                if (!c || !c.login) return false;
                return c.login.toLowerCase() === owner.toLowerCase();
              });
              s.ownerContributions = ownerEntry?.contributions ?? 0;
            }
          }
        } catch (e) {
          // ignore contributor fetch errors (rate limits etc.)
        }

        setStats(s);
        try {
          window.localStorage.setItem(cacheKey, JSON.stringify(s));
        } catch (e) {
          // ignore
        }
        // Fetch server-side contribution breakdown (requires GITHUB_TOKEN env on server)
        try {
          const contribRes = await fetch(
            `/api/github-stats?user=${encodeURIComponent(
              owner
            )}&year=${new Date().getFullYear()}`
          );
          if (contribRes.ok) {
            const contribJson = await contribRes.json();
            if (!contribJson.error) {
              s.totalContributions = contribJson.totalContributions ?? 0;
              s.totalCommitContributions =
                contribJson.totalCommitContributions ?? 0;
              s.totalPullRequestContributions =
                contribJson.totalPullRequestContributions ?? 0;
              s.totalIssueContributions =
                contribJson.totalIssueContributions ?? 0;
              s.contributedRepositoriesCount =
                contribJson.contributedRepositoriesCount ?? 0;
            }
          }
        } catch (e) {
          // ignore server contribution fetch errors
        }
      } catch (err) {
        console.warn("Failed to fetch GitHub stats", err);
      }
    }

    fetchStats();
  }, [owner, repo, cacheKey]);

  // always render the card; show placeholders while loading or when data is unavailable
  const loaded = Boolean(stats);

  return (
    <div className={styles.container}>
      <a
        className={styles.card}
        href={`https://github.com/${owner}/${repo}`}
        target="_blank"
        rel="noreferrer"
      >
        <div className={styles.content}>
          <div className={styles.left}>
            <div className={styles.title}>Choubik Houssam's GitHub Stats</div>
            <div className={styles.list}>
              <div className={styles.item}>
                <div className={styles.label}>Total Stars Earned:</div>
                <div className={styles.value}>{stats?.stars ?? "—"}</div>
              </div>
              <div className={styles.item}>
                <div className={styles.label}>
                  Total Commits ({new Date().getFullYear()}):
                </div>
                <div className={styles.value}>
                  {stats?.totalCommitContributions ??
                    stats?.totalContributions ??
                    "—"}
                </div>
              </div>
              <div className={styles.item}>
                <div className={styles.label}>Total PRs:</div>
                <div className={styles.value}>
                  {stats?.totalPullRequestContributions ?? "—"}
                </div>
              </div>
              <div className={styles.item}>
                <div className={styles.label}>Total Issues:</div>
                <div className={styles.value}>
                  {stats?.totalIssueContributions ?? "—"}
                </div>
              </div>
              <div className={styles.item}>
                <div className={styles.label}>Contributed to (last year):</div>
                <div className={styles.value}>
                  {stats?.contributedRepositoriesCount ?? "—"}
                </div>
              </div>
            </div>
          </div>
          <div className={styles.right}>
            <div className={styles.grade}>
              {/* simple score = clamp(totalContributions / 300 * 100) */}
              {(() => {
                const total = stats?.totalContributions ?? 0;
                const pct = Math.max(
                  0,
                  Math.min(100, Math.round((total / 300) * 100))
                );
                let grade = "C";
                if (pct >= 85) grade = "A";
                else if (pct >= 70) grade = "B";
                else if (pct >= 50) grade = "C+";
                else if (pct >= 30) grade = "C";
                else grade = "D";
                const stroke = 6;
                const size = 86;
                const radius = (size - stroke) / 2;
                const circumference = 2 * Math.PI * radius;
                const offset = circumference - (pct / 100) * circumference;
                return (
                  <svg
                    width={size}
                    height={size}
                    viewBox={`0 0 ${size} ${size}`}
                    role="img"
                  >
                    <title>GitHub activity grade</title>
                    <circle
                      cx={size / 2}
                      cy={size / 2}
                      r={radius}
                      stroke="#1f2937"
                      strokeWidth={stroke}
                      fill="none"
                    />
                    <circle
                      cx={size / 2}
                      cy={size / 2}
                      r={radius}
                      stroke="#60a5fa"
                      strokeWidth={stroke}
                      fill="none"
                      strokeLinecap="round"
                      strokeDasharray={circumference}
                      strokeDashoffset={offset}
                      transform={`rotate(-90 ${size / 2} ${size / 2})`}
                    />
                    <text
                      x="50%"
                      y="50%"
                      dominantBaseline="middle"
                      textAnchor="middle"
                      style={{
                        fontSize: "18px",
                        fill: "#dbeafe",
                        fontWeight: 700,
                      }}
                    >
                      {grade}
                    </text>
                  </svg>
                );
              })()}
            </div>
          </div>
        </div>
        {!loaded && (
          <div style={{ marginTop: 10 }} className={styles.muted}>
            Stats unavailable yet — loading or rate-limited.
          </div>
        )}
      </a>
    </div>
  );
}
